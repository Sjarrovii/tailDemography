strip1st(df$PP2[1])
head(df)
df<-df[,2:length(df)-1]
names(df)
#read data into R
df<-read.csv("../Documents/Financial/Financial/Budget_2016xi27_trim.csv")
names(df)
head(df)
df<-df[,c(2:length(df)-1)]
names(df)
#read data into R
df<-read.csv("../Documents/Financial/Financial/Budget_2016xi27_trim.csv")
names(df)
head(df)
df<-df[,-c(1,length(df))]
names(df)
df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long")
df2
head(df2)
df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long",idvar = names(df))
names(df)-c("PP1","PP2")
names(df)[-c(which(names(df)=="PP1|PP2"))]
names(df)[-c(which(names(df)=="PP1",which(names(df)=="PP2"))]
names(df)[-c(which(names(df)=="PP1",which(names(df)=="PP2")))]
names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long",idvar = longnames)
# df<-read.csv("../Documents/Financial/Financial/Budget_2016xi27_trim.csv")
# names(df)
# head(df)
# df<-df[,-c(1,length(df))]
# names(df)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
# df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long",idvar = longnames)
# head(df2)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
#add new data
addnewdata<-function(x,year=date){
#Create an empty list to house the data
budgets<-list()
#read data into R as an element of budgets
budgets[[length(budgets)+1]]=read.csv("../Documents/Financial/Financial/budgetTracker.csv")
#add a column for year
budgets[[length]]['year']=year
#standardize date format
budgets[[length]]['due.date']=as.Date.character(budgets[[length]]['due.date'],format = "%m/%d/%Y")
#add column for week of the year
budgets[[length]]['week']=strftime(budgets[[length]]['due.date'],"%V")
return(budgets)
}
addnewdata("../Documents/Financial/Financial/budgetTracker.csv",2018)
traceback()
# df<-read.csv("../Documents/Financial/Financial/Budget_2016xi27_trim.csv")
# names(df)
# head(df)
# df<-df[,-c(1,length(df))]
# names(df)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
# df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long",idvar = longnames)
# head(df2)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
#add new data
addnewdata<-function(x,year=date){
#Create an empty list to house the data
budgets<-list()
#read data into R as an element of budgets
budgets[[length(budgets)+1]]=read.csv("../Documents/Financial/Financial/budgetTracker.csv")
#add a column for year
budgets[[length(budgets)]]['year']=year
#standardize date format
budgets[[length(budgets)]]['due.date']=as.Date.character(budgets[[length(budgets)]]['due.date'],format = "%m/%d/%Y")
#add column for week of the year
budgets[[length(budgets)]]['week']=strftime(budgets[[length(budgets)]]['due.date'],"%V")
return(budgets)
}
addnewdata("../Documents/Financial/Financial/budgetTracker.csv",2018)
# df<-read.csv("../Documents/Financial/Financial/Budget_2016xi27_trim.csv")
# names(df)
# head(df)
# df<-df[,-c(1,length(df))]
# names(df)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
# df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long",idvar = longnames)
# head(df2)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
#add new data
addnewdata<-function(x,year=date){
#Create an empty list to house the data
budgets<-list()
#read data into R as an element of budgets
budgets[[length(budgets)+1]]=read.csv(x)
#add a column for year
budgets[[length(budgets)]]['year']=year
#standardize date format
budgets[[length(budgets)]]['due.date']=as.Date.character(budgets[[length(budgets)]]['due.date'],format = "%m/%d/%Y")
#add column for week of the year
budgets[[length(budgets)]]['week']=strftime(budgets[[length(budgets)]]['due.date'],"%V")
return(budgets)
}
addnewdata("../Documents/Financial/Financial/budgetTracker.csv",2018)
# df<-read.csv("../Documents/Financial/Financial/Budget_2016xi27_trim.csv")
# names(df)
# head(df)
# df<-df[,-c(1,length(df))]
# names(df)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
# df2<-reshape(data=df,varying = c("PP1","PP2"),v.names = "PP",direction = "long",idvar = longnames)
# head(df2)
# longnames=names(df)[-c(which(names(df)=="PP1"),which(names(df)=="PP2"))]
#add new data
addnewdata<-function(x,year=date){
#Create an empty list to house the data
budgets<-list()
#read data into R as an element of budgets
budgets[[length(budgets)+1]]=read.csv(as.character(x))
#add a column for year
budgets[[length(budgets)]]['year']=year
#standardize date format
budgets[[length(budgets)]]['due.date']=as.Date.character(budgets[[length(budgets)]]['due.date'],format = "%m/%d/%Y")
#add column for week of the year
budgets[[length(budgets)]]['week']=strftime(budgets[[length(budgets)]]['due.date'],"%V")
return(budgets)
}
addnewdata("../Documents/Financial/Financial/budgetTracker.csv",2018)
as.character("../Documents/Financial/Financial/budgetTracker.csv")
read.csv(as.character("../Documents/Financial/Financial/budgetTracker.csv"))
rm(list=ls())
#Define Probability function
binprob<-function(n,x,p1,p2,prior1,prior2,option,digits){
combinatoric=factorial(n)/(factorial(x)*factorial(n-x))
denominator=combinatoric*((p1)^n*(1-p1)^(n-x)*prior1+(p2)^n*(1-p2)*prior2)
if(option==1){
I1=1
}
if(option==0){
I1=0
}
I2=1-I1
numerator=combinatoric*(I1*((p1)^n*(1-p1)^(n-x)*prior1)+I2*((p2)^n*(1-p2)*prior2))
probability=numerator/denominator
return(round(probability,digits))
}
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.6 ,prior1 =.1 ,prior2 = .9,option = ,digits = 3)
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.6 ,prior1 =.1 ,prior2 = .9,option = 2,digits = 3)
#Define Probability function
binprob<-function(n,x,p1,p2,prior1,prior2,option,digits){
combinatoric=factorial(n)/(factorial(x)*factorial(n-x))
denominator=combinatoric*((p1)^n*(1-p1)^(n-x)*prior1+(p2)^n*(1-p2)*prior2)
if(option==1){
I1=1;I2=0
}
if(option==2){
I1=0;I2=1
}
numerator=combinatoric*(I1*((p1)^n*(1-p1)^(n-x)*prior1)+I2*((p2)^n*(1-p2)*prior2))
probability=numerator/denominator
return(round(probability,digits))
}
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.6 ,prior1 =.1 ,prior2 = .9,option = 2,digits = 3)
#Define Probability function
binprob<-function(n,x,p1,p2,prior1,prior2,option,digits){
combinatoric=choose(n=n,k=x)
denominator=combinatoric*((p1)^n*(1-p1)^(n-x)*prior1+(p2)^n*(1-p2)*prior2)
if(option==1){
I1=1;I2=0
}
if(option==2){
I1=0;I2=1
}
numerator=combinatoric*(I1*((p1)^n*(1-p1)^(n-x)*prior1)+I2*((p2)^n*(1-p2)*prior2))
probability=numerator/denominator
return(round(probability,digits))
}
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.6 ,prior1 =.1 ,prior2 = .9,option = 2,digits = 3)
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.7 ,prior1 =.1 ,prior2 = .9,option = 2,digits = 3)
#Define Probability function
binprob<-function(n,x,p1,p2,prior1,prior2,option,digits){
combinatoric=choose(n=n,k=x)
denominator=combinatoric*((p1)^n*(1-p1)^(n-x)*prior1+(p2)^n*(1-p2)^(n-x)*prior2)
if(option==1){
I1=1;I2=0
}
if(option==2){
I1=0;I2=1
}
numerator=combinatoric*(I1*((p1)^n*(1-p1)^(n-x)*prior1)+I2*((p2)^n*(1-p2)^(n-x)*prior2))
probability=numerator/denominator
return(round(probability,digits))
}
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.7 ,prior1 =.5 ,prior2 = .5,option = 2,digits = 3)
#Define Probability function
binprob<-function(n,x,p1,p2,prior1,prior2,option,digits){
combinatoric=choose(n=n,k=x)
denominator=combinatoric*((p1^n)*((1-p1)^(n-x))*prior1+(p2^n)*((1-p2)^(n-x))*prior2)
if(option==1){
I1=1;I2=0
}
if(option==2){
I1=0;I2=1
}
numerator=combinatoric*(I1*((p1^n)*((1-p1)^(n-x))*prior1)+I2*((p2^n)*((1-p2)^(n-x))*prior2))
probability=numerator/denominator
return(round(probability,digits))
}
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.7 ,prior1 =.5 ,prior2 = .5,option = 2,digits = 3)
#Define Probability function
binprob<-function(n,x,p1,p2,prior1,prior2,option,digits){
combinatoric=choose(n=n,k=x)
denominator=combinatoric*((p1^x)*((1-p1)^(n-x))*prior1+(p2^x)*((1-p2)^(n-x))*prior2)
if(option==1){
I1=1;I2=0
}
if(option==2){
I1=0;I2=1
}
numerator=combinatoric*(I1*((p1^x)*((1-p1)^(n-x))*prior1)+I2*((p2^x)*((1-p2)^(n-x))*prior2))
probability=numerator/denominator
return(round(probability,digits))
}
binprob(n = 5,x =2 ,p1 =.5 ,p2 =.7 ,prior1 =.5 ,prior2 = .5,option = 2,digits = 3)
triprob<-function(n,x,p1,p2,p3,prior1,prior2,prior3,option,digits){
combinatoric=factorial(n)/(factorial(x)*factorial(n-x))
denominator=combinatoric*((p1)^x*(1-p1)^(n-x)*prior1+(p2)^x*(1-p2)*prior2+(p3)^x*(1-p3)*prior3)
if(option==1){
I1=1;I2=0;I3=0
}
if(option==2){
I1=0;I2=1;I3=0
}
if(option==3){
I1=0;I2=0;I3=1
}
numerator=combinatoric*(I1*((p1)^x*(1-p1)^(n-x)*prior1)+I2*((p2)^x*(1-p2)*prior2)+I3*((p3)^x*(1-p3)*prior3))
probability=numerator/denominator
if(digits=="none"){
return(probability)
}else{
return(round(probability,digits))
}
}
range=c(1:3)
sum(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))
lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 4))
sum(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))-lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 4))[[1]]
range={1:2}
max(sapply(range,function(y) binprob(n = 5,x =0 ,p1 =.8 ,p2 =.3 ,prior1 =.5 ,prior2 = .5,option = y,digits = 3)))
lapply(range,function(y) binprob(n = 5,x =0 ,p1 =.8 ,p2 =.3 ,prior1 =.5 ,prior2 = .5,option = y,digits = 3))
triprob<-function(n,x,p1,p2,p3,prior1,prior2,prior3,option,digits){
combinatoric=factorial(n)/(factorial(x)*factorial(n-x))
denominator=combinatoric*((p1)^x*(1-p1)^(n-x)*prior1+(p2)^x*(1-p2)*prior2+(p3)^x*(1-p3)*prior3)
if(option==1){
I1=1;I2=0;I3=0
}
if(option==2){
I1=0;I2=1;I3=0
}
if(option==3){
I1=0;I2=0;I3=1
}
numerator=combinatoric*(I1*((p1)^x*(1-p1)^(n-x)*prior1)+I2*((p2)^x*(1-p2)*prior2)+I3*((p3)^x*(1-p3)*prior3))
probability=numerator/denominator
if(digits=="none"){
return(probability)
}else{
return(round(probability,digits))
}
}
range=c(1:3)
sum(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))
lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 4))
sum(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))-lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 4))[[1]]
max(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))
lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 2))
triprob<-function(n,x,p1,p2,p3,prior1,prior2,prior3,option,digits){
combinatoric=choose(n = n,k=x)
denominator=combinatoric*((p1)^x*(1-p1)^(n-x)*prior1+(p2)^x*(1-p2)*prior2+(p3)^x*(1-p3)*prior3)
if(option==1){
I1=1;I2=0;I3=0
}
if(option==2){
I1=0;I2=1;I3=0
}
if(option==3){
I1=0;I2=0;I3=1
}
numerator=combinatoric*(I1*((p1)^x*(1-p1)^(n-x)*prior1)+I2*((p2)^x*(1-p2)*prior2)+I3*((p3)^x*(1-p3)*prior3))
probability=numerator/denominator
if(digits=="none"){
return(probability)
}else{
return(round(probability,digits))
}
}
range=c(1:3)
max(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))
lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 2))
sum(sapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = "none")))-lapply(range,function(y) triprob(n =4 ,x =2 ,p1 =.5 ,p2 =.7 ,p3 =.3 ,prior1 =.4 ,prior2 =.3 ,prior3 =.3 ,option =y,digits = 4))[[1]]
1-pnorm(.975)
qnorm(.975)
1-qnorm(.975)
qnorm(.5)
qnorm(.674)
qnorm(.975)
qnorm(.975,lower.tail = T)
qnorm(.975,lower.tail = F)
install.packages('ggplot2')
library(ggplot2)
df = read.csv('cleaned CC data 2000-2017_.csv')
setwd('C:/Users/Christopher/Documents/GitHub/tailDemography')
df = read.csv('cleaned CC data 2000-2017_.csv')
df = read.csv('cleaned CC data 2000-2017.csv')
df.head()
head(df)
svlTl + geom_point()
svlTl = ggplot(aes(x = 'svl', y = 'tl', fill = 'sex'), data = df)
svlTl + geom_point()
svlTl = ggplot(aes(x = 'svl', y = 'tl', colors = 'sex'), data = df)
svlTl + geom_point()
svlTl = ggplot(aes(x = 'svl', y = 'tl'), data = df)
svlTl = ggplot(aes(x = 'svl', y = 'tl'), data = df)
svlTl + geom_point()
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
library(ggplot2)
setwd('C:/Users/Christopher/Documents/GitHub/tailDemography')
df = read.csv('Cleaned Sj data.csv')
head(df)
fig_svlTL= fig_svlTLall +facet_wrap(~year)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTl + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54) + geom_smooth(method = lm)
#fig_svlTL= fig_svlTLall +facet_wrap(~year)
#ggsave('SVLvTLall.png',fig_svlTLall)
#ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
#print(fig_svlTL)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTl + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)
#fig_svlTL= fig_svlTLall +facet_wrap(~year)
#ggsave('SVLvTLall.png',fig_svlTLall)
#ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
#print(fig_svlTL)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTlall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)
#fig_svlTL= fig_svlTLall +facet_wrap(~year)
#ggsave('SVLvTLall.png',fig_svlTLall)
#ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
#print(fig_svlTL)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTlall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm)
#fig_svlTL= fig_svlTLall +facet_wrap(~year)
#ggsave('SVLvTLall.png',fig_svlTLall)
#ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
#print(fig_svlTL)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTlall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm) + theme(plot.title = element_text(hjust = 0.5))
#fig_svlTL= fig_svlTLall +facet_wrap(~year)
#ggsave('SVLvTLall.png',fig_svlTLall)
#ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
#print(fig_svlTL)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTlall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm) + theme(plot.title = element_text(hjust = 0.5))
fig_svlTL= fig_svlTLall +facet_wrap(~year)
ggsave('SVLvTLall.png',fig_svlTLall)
ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
print(fig_svlTL)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTlall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm) + theme(plot.title = element_text(hjust = 0.5))
fig_svlTL= fig_svlTLall +facet_wrap(~year)
ggsave('SVLvTLall.png',fig_svlTLall)
ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
print(fig_svlTL)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + stat_summary(position = 'identity')+ xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + stat_summary(position = position_dodge())+ xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + stat_summary(position = position_dodge(0.5))+ xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + stat_summary_bin(position = position_dodge(0.5))+ xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
svlTlall = ggplot(aes(x = svl, y = tl), data = df)
fig_svlTLall = svlTlall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('TL vs SVL by Sex and Autotomy Status') +ylab('TL in mm') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm) + theme(plot.title = element_text(hjust = 0.5))
fig_svlTL= fig_svlTLall +facet_wrap(~year)
ggsave('SVLvTLall.png',fig_svlTLall)
ggsave('SVLvTLall.png',fig_svlTL)
print(fig_svlTLall)
print(fig_svlTL)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + stat_summary_bin(position ='stacked')+ xlab("Year") +facet_wrap(~sex,nrow = 2)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + stat_summary(position ='stacked')+ xlab("Year") +facet_wrap(~sex,nrow = 2)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = factor(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = factor(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap,stat_count()), position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = factor(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = count(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'fill') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") +facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'fill') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + scale_y_discrete(labels = percentage)+facet_wrap(~sex,nrow = 2)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'fill') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + scale_y_discrete(labels = percent)+facet_wrap(~sex,nrow = 2)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'fill') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + scale_y_continuous(labels = percent)+facet_wrap(~sex,nrow = 2)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'fill') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = newRecap), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = factor(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), data = df,position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = factor(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap), position = 'dodge') + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
length(unique(df$newRecap))
# need to show y labels
recapSexYr = ggplot(aes(x = factor(year), y = factor(newRecap)), data = df)
fig_recapSexYr = recapSexYr + geom_col(aes(fill = newRecap)) + theme(axis.text.x = element_text(angle = 45)) + xlab("Year") + facet_wrap(~sex,nrow = 2)
ggsave('recapSexYr.png',fig_recapSexYr)
print(fig_recapSexYr)
svlMassYear = ggplot(aes(x = svl, y = mass), data = df)
fig_svlMassYearall = svlMassYearall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('Mass vs SVL by Sex and Autotomy Status') +ylab('Mass in g') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm) + theme(plot.title = element_text(hjust = 0.5))
svlMassYearall = ggplot(aes(x = svl, y = mass), data = df)
fig_svlMassYearall = svlMassYearall + geom_point(aes(color = factor(sex), shape = factor(autotomized))) + scale_shape( solid = FALSE) + ggtitle('Mass vs SVL by Sex and Autotomy Status') +ylab('Mass in g') + xlab('SVL in mm')+ geom_vline(xintercept = 54)  + geom_smooth(method = lm) + theme(plot.title = element_text(hjust = 0.5))
fig_svlMassYear= fig_svlMassYearall +facet_wrap(~year)
ggsave('svlMassYearall.png',fig_svlMassYearall)
ggsave('svlMassYearall.png',fig_svlMassYear)
print(fig_svlMassYearall)
print(fig_svlMassYear)
