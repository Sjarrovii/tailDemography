rm(list=ls()) #clears the environment
# filefolder="G:/Lizard work for the road/excel files"
filefolder="C:/Users/test/Documents/Chris/Research/Sceloporus/Caudal Autotomy/Demography"
knitr::opts_knit$set(root.dir = normalizePath(filefolder))
#this is an option we have to use for RMD notebooks otherwise the wd is reset after each chunk is executed
#setwd(filefolder) #this can be used instead for a regular rscript
options(pkgType = "source")
mypackages=c("rio","ggplot2","stringr","tables","knitr","xlsx","rJava")
neededpackages=mypackages[which(!is.element(el=mypackages,set=installed.packages()))]
if(length(neededpackages>0)){
install.packages(neededpackages)
}else{
warning("All packages already installed")
}
lapply(mypackages,function(x) library(x,character.only = T))
myfiles<-list.files( path = "excelFiles",pattern = c(".xls",".xlsx"))
myfiles_path<-lapply(myfiles,function(x)paste("excelFiles",x,sep = "/"))
mydata<-lapply(myfiles_path,function(x) read.xlsx(x,sheetIndex = 1))
lapply(mydata,head)
emptyCol<-function(column){
NAS<-apply(column,2,function(x) sum(is.na(x))/length(x))#number of NA values
NAS<-which(NAS==1)
NAnames<-grep(pattern = "NA.",x = names(column),ignore.case = T)
result<-intersect(NAS,NAnames)
if(length(result)==0){
return(1:length(column))
}else{
return(-result)
}
}
mydata_trim<-lapply(mydata,function(x) x[,emptyCol(x)])
print(lapply(mydata_trim,names))
for(i in 1:length(mydata)){ #change all colnames to lowercase
names(mydata_trim[[i]])<-tolower(names(mydata_trim[[i]]))
}
rxl<-lapply(mydata_trim,function(x) grep(pattern = "rtl", x = names(x),ignore.case = T))
for(i in 1:length(rxl)){
names(mydata_trim[[i]])[rxl[[i]]]<-"rxl"
}
tl<-lapply(mydata_trim,function(x) grep(pattern = "tl", x = names(x),ignore.case = T))
for(i in 1:length(tl)){
names(mydata_trim[[i]])[tl[[i]]]<-"tl"
}
for(i in 1:length(mydata_trim)){
names(mydata_trim[[i]])[which(names(mydata_trim[[i]])=="rxl")]<-"rtl"
}
keepnames<-c("species", "toes","date","sex","svl","mass","paint.mark","location","meters","new.recap","vial","painted","misc")
tl_rtl<-"tl|rtl"
#removed "tl" and "rtl" from this b/c they were treated earlier and including them here changes them all to "tl".
p.keepnames<-c()
for(name in keepnames){p.keepnames<-paste(p.keepnames,name,"|",sep = "")}
p.keepnames<-substr(p.keepnames,1,nchar(p.keepnames)-1) #removes trailing "|".
rawnames<-lapply(mydata_trim,names)#original names for each year's data
mydata_vars<-list()#will eventually only contain columns with variable names that can be kept or fixed
droppedvar<-list() #Will eventually only contain variables dropped from mydata to create mydata_goodNames
for(i in 1:length(rawnames)){
for(j in 1:length(rawnames[[i]])){
if(length(grep(pattern = "tl|rtl",x=rawnames[[i]][j]))>0){
next()
}
if(length(grep(pattern = p.keepnames,x=rawnames[[i]][j])>0)){
for(name in keepnames){
if(length(grep(pattern= name,x=rawnames[[i]][j]))>0){
rawnames[[i]][j]<-name
}
}
}else{
rawnames[[i]][j]<-"DROP"
}
}
droppedvar[[i]]<-mydata_trim[[i]][,which(rawnames[[i]]=="DROP")]#creates new list with dropped variables
names(droppedvar[[i]])<-rawnames[[i]][which(rawnames[[i]]=="DROP")]#attaches names to droppedvar
mydata_vars[[i]]<-mydata_trim[[i]][,which(rawnames[[i]]!="DROP")]#creates new list with kept variables
names(mydata_vars[[i]])<-rawnames[[i]][which(rawnames[[i]]!="DROP")]#attaches mapped names to mydata_vars
}
#print(lapply(mydata_vars, names))
print(lapply(mydata_vars, names))
# rm(mydata_trim)
myxls=list.files(path = "C:/Users/test/Documents/Chris/Research/Sceloporus/Caudal Autotomy/Demography/excelFiles",pattern="x.xls")
myyears<-strsplit(x=myxls,split = "xCC|x.xls")#creates a vector of the years for the data
myyears<-sapply(myyears,function(x) x[2])
#creates a variable, year, in each sublist of mydata_vars and populates it with the appropriate year from myyears
for(i in 1:length(mydata_vars)){
mydata_vars[[i]][,"year"]<-myyears[i]
}
forceChar<-function(x){
if(is.data.frame(x)==T){
apply(x,2,as.character)
}else{
as.character(x)
}
}
mydata_vars<-lapply(mydata_vars,forceChar)
mycombfile<-data.frame()
for(i in 1:length(mydata_vars)){
mycombfile<-rbind(mycombfile,mydata_vars[[i]])
}
lowerCols<-grep("sex|species|painted|new.recap|toes",names(mycombfile))
for(col in lowerCols){
mycombfile[,col]<-tolower(mycombfile[,col])
}
mycombfile$review_sex<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$sex!="m" & mycombfile$sex!="f"),"review_sex"]<-T
mycombfile$review_species<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$species!="sj" & mycombfile$species!="sv"),"review_species"]<-T
mycombfile$review_painted<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$painted!="painted" & mycombfile$painted!="yes" & mycombfile$painted!="" & mycombfile$painted!="no"),"review_painted"]<-T
mycombfile$review_new.recap<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$new.recap!="new" & mycombfile$new.recap!="n" & mycombfile$new.recap!="recap" & mycombfile$painted!="r"),"review_new.recap"]<-T
trim <- function (x) gsub("^\\s+|\\s+$", "", x)# from Stackoverflow https://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
names(mycombfile)[which(names(mycombfile)=="rtl")]<-"rtl_orig"
mycombfile$rtl<-as.numeric(as.character(trim(trim(mycombfile$rtl_orig))))
mycombfile[which(mycombfile$rtl==-1),"rtl"]<-0
mycombfile$autotomized<-logical(nrow(mycombfile))
mycombfile[which(!is.na(mycombfile$rtl_orig) & mycombfile$rtl_orig!="o" & mycombfile$rtl_orig!="0" & mycombfile$rtl_orig!=" 0"),"autotomized"]<-T #don't know why I have to explicitly exclude rtl_orig =" 0" after using trim function
unique(mycombfile[which(mycombfile$autotomized==T),"rtl_orig"])
mycombfile$review_rtl<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$rtl) & !is.na(mycombfile$rtl_orig)),"review_rtl"]<-T
unique(mycombfile$species)
unique(grep("v|j",mycombfile$species,value = T)
)
mycombfile$review_species<-logical(nrow(mycombfile))
mycombfile[grep("v|j|\\?",mycombfile$species),"review_species"]<-T
unique(mycomfile[which(mycombfile$review_species==T),"species"])
unique(mycombfile[which(mycombfile$review_species==T),"species"])
length(mycombfile[which(mycombfile$review_species==T & mycombfile$species=="sc?"),"species"])
length(mycombfile[which(mycombfile$species=="sc?"),"species"])
length(mycombfile[which(mycombfile$species=="sc?"),"species"])/nrow(mycombfile)
mycombfile$review_sex<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$sex!="m" & mycombfile$sex!="f"),"review_sex"]<-T
mycombfile$review_species<-logical(nrow(mycombfile))
mycombfile[grep("v|j|\\?",mycombfile$species),"review_species"]<-T #this captures "sc?" as well;this is one obs (~0.014% of obs)
mycombfile$review_painted<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$painted!="painted" & mycombfile$painted!="yes" & mycombfile$painted!="" & mycombfile$painted!="no"),"review_painted"]<-T
mycombfile$review_new.recap<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$new.recap!="new" & mycombfile$new.recap!="n" & mycombfile$new.recap!="recap" & mycombfile$painted!="r"),"review_new.recap"]<-T
trim <- function (x) gsub("^\\s+|\\s+$", "", x)# from Stackoverflow https://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
names(mycombfile)[which(names(mycombfile)=="rtl")]<-"rtl_orig"
mycombfile$rtl<-as.numeric(as.character(trim(trim(mycombfile$rtl_orig))))
mycombfile[which(mycombfile$rtl==-1),"rtl"]<-0
mycombfile$autotomized<-logical(nrow(mycombfile))
mycombfile[which(!is.na(mycombfile$rtl_orig) & mycombfile$rtl_orig!="o" & mycombfile$rtl_orig!="0" & mycombfile$rtl_orig!=" 0"),"autotomized"]<-T #don't know why I have to explicitly exclude rtl_orig =" 0" after using trim function
unique(mycombfile[which(mycombfile$autotomized==T),"rtl_orig"])
mycombfile$review_rtl<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$rtl) & !is.na(mycombfile$rtl_orig)),"review_rtl"]<-T
length(unique(mycombfile$review_rtl))
unique(mycombfile[which(mycombfile$species=="sj|sv"),"species"])
unique(mycombfile[which(mycombfile$species=="sj"|mycombfile$species=="sv"),"species"])
mycombfile[which(mycombfile$species=="sj"|mycombfile$species=="sv"|mycombfile$species=="v"|mycombfile$species=="j"),"review_species"]<-F
unique(mycombfile[which(mycombfile$review_species==T),"species"])
unique(mycombfile[which(mycombfile$review_species==F),"species"])
mycombfile$drop_species<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$species!="sj"& mycombfile$species="sv"& mycombfile$species=="v"& mycombfile$species=="j" & mycombfile$review_species==F),"drop_species"]<-T
mycombfile$drop_species<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$species!="sj"& mycombfile$species!="sv"& mycombfile$species!="v"& mycombfile$species!="j" & mycombfile$review_species==F),"drop_species"]<-T
unique(mycombfile[which(mycombfile$drop_species==T),"species"])
unique(mycombfile[which(mycombfile$drop_species==F),"species"])
mycombfile$drop_species<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$species!="sj"& mycombfile$species!="sv"& mycombfile$species!="v"& mycombfile$species!="j" & mycombfile$review_species==F),"drop_species"]<-T
mycombfile$drop_morphometrics<-logical(nrow(mycombfile))
mycombfile[which(is.na(mycombfile$species)|is.na(mycombfile$svl)|is.na(mycombfile$tl)|is.na(mycombfile$rtl_orig)|is.na(mycombfile$toes)),"drop_morphometrics"]<-T
length(mycombfile$review_new.recap)
length(mycombfile$review_new.recap==T)
length(mycombfile$review_sex==T)
nrow(mycombfile)
length(mycombfile$review_species==T)
length(mycombfile$review_painted==T)
length(mycombfile$review_rtl==T)
length(which(mycombfile$sex!="m" & mycombfile$sex!="f"))
mycombfile$review_sex<-logical(nrow(mycombfile))
mycombfile[which(mycombfile$sex!="m" & mycombfile$sex!="f"),"review_sex"]<-T
length(which(mycombfile$review_sex!=T))
length(which(mycombfile$review_sex==T))
length(mycombfile$review_painted==T))
length(which(mycombfile$review_painted==T))
